[{"/Users/claud/SCHOOL/christmas/src/index.js":"1","/Users/claud/SCHOOL/christmas/src/App.js":"2","/Users/claud/SCHOOL/christmas/src/components/Navbar.js":"3","/Users/claud/SCHOOL/christmas/src/components/Resources.js":"4","/Users/claud/SCHOOL/christmas/src/components/Healthier.js":"5","/Users/claud/SCHOOL/christmas/src/components/Better.js":"6","/Users/claud/SCHOOL/christmas/src/components/Faster.js":"7","/Users/claud/SCHOOL/christmas/src/components/Logout.js":"8","/Users/claud/SCHOOL/christmas/src/components/Home.js":"9","/Users/claud/SCHOOL/christmas/src/components/Login.js":"10","/Users/claud/SCHOOL/christmas/src/components/About.js":"11","/Users/claud/SCHOOL/christmas/src/components/Calendar.js":"12","/Users/claud/SCHOOL/christmas/src/components/Footer.js":"13","/Users/claud/SCHOOL/christmas/src/components/CardContainer.js":"14","/Users/claud/SCHOOL/christmas/src/components/Card.js":"15"},{"size":1020,"mtime":1677101497136,"results":"16","hashOfConfig":"17"},{"size":3658,"mtime":1677103554905,"results":"18","hashOfConfig":"17"},{"size":4571,"mtime":1676411948693,"results":"19","hashOfConfig":"17"},{"size":3189,"mtime":1676323932128,"results":"20","hashOfConfig":"17"},{"size":1954,"mtime":1675881942901,"results":"21","hashOfConfig":"17"},{"size":1785,"mtime":1675881942900,"results":"22","hashOfConfig":"17"},{"size":1714,"mtime":1675881942901,"results":"23","hashOfConfig":"17"},{"size":592,"mtime":1676411948692,"results":"24","hashOfConfig":"17"},{"size":2792,"mtime":1677118366961,"results":"25","hashOfConfig":"17"},{"size":1692,"mtime":1677118366961,"results":"26","hashOfConfig":"17"},{"size":2058,"mtime":1677123839946,"results":"27","hashOfConfig":"17"},{"size":19499,"mtime":1677104935852,"results":"28","hashOfConfig":"17"},{"size":346,"mtime":1676323932126,"results":"29","hashOfConfig":"17"},{"size":526,"mtime":1677123827962,"results":"30","hashOfConfig":"17"},{"size":687,"mtime":1677124750002,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},"5vckef",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"73","usedDeprecatedRules":"36"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/claud/SCHOOL/christmas/src/index.js",["83"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n// Firebase\nimport { getDatabase } from 'firebase/database';\n\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC_g-TK3kPlNR9Hg2rzjYw5LIKxr9qixc0\",\n  authDomain: \"info442-christmas.firebaseapp.com\",\n  projectId: \"info442-christmas\",\n  storageBucket: \"info442-christmas.appspot.com\",\n  messagingSenderId: \"118043730120\",\n  appId: \"1:118043730120:web:c67e0228349dfc5cec05fd\"\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\n\nconst db = getDatabase();\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n",[],"/Users/claud/SCHOOL/christmas/src/App.js",["84","85","86","87","88"],[],"import React, { useState, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { getAuth, onAuthStateChanged } from 'firebase/auth'\nimport Home from './components/Home';\nimport Navbar from './components/Navbar';\nimport Resources from './components/Resources';\nimport About from './components/About';\nimport Login from './components/Login';\nimport Healthier from './components/Healthier';\nimport Faster from './components/Faster';\nimport Better from './components/Better';\nimport Calendar from './components/Calendar';\nimport background from \"./img/bg-lg.png\"\nimport { LogOut } from './components/Logout';\nimport { getDatabase, ref, onValue, set, push as firebasePush } from 'firebase/database';\n\nfunction App() {\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\t// Stores user log in information, friends and enables more fucntionality.\n\tconst [user, setUser] = useState({});\n\tconst [userData, setUserData] = useState({});\n\tconst [loggedIn, setLoggedIn] = useState(false);\n\tconst styles = {\n\t\tcontainer: {\n\t\t\tbackgroundImage: `url(${background})`,\n\t\t\tbackgroundPosition: 'center',\n\t\t\tbackgroundSize: 'cover',\n\t\t\tbackgroundRepeat: 'no-repeat',\n\t\t\twidth: '100vw',\n\t\t\theight: '100vh'\n\t\t}\n\t};\n\t// Loading Firebase Data\n\tconst db = getDatabase();\n\tconst dataRef = ref(db, 'AllData');\n\n\t// Check if User Login\n\tuseEffect(() => {\n\t\tconst auth = getAuth();\n\t\tconst unregisterAuthListener = onAuthStateChanged(auth, (firebaseUser) => {\n\t\t\tif(firebaseUser) {\n\t\t\t\tconsole.log('Logging In')\n\t\t\t\tsetUser(firebaseUser);\n\t\t\t\tsetLoggedIn(true);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"logging out\");\n\t\t\t\tsetUser({});\n\t\t\t\tsetLoggedIn(false);\n\t\t\t}\n\t\t})\n\n\t\t// Extracting Data\n\t\tconst offFunction = onValue(dataRef, (snapshot) => {\n\t\t\tconst allData = snapshot.val();\n\t\t\tconst dataKeys = Object.keys(allData);\n\t\t\tconst dataArray = dataKeys.map((key) => {\n\t\t\t\tconst userData = allData[key];\n\t\t\t\treturn userData;\n\t\t\t})\n\t\t\tsetUserData(dataArray);\n\t\t})\n\n\t\tfunction cleanup() { \n\t\t\tunregisterAuthListener();\n\t\t\toffFunction();\n\t\t}\n\n\t\treturn cleanup;\n\t}, []) \n\n\n\tfunction handleNewUser() {\n\t\tconsole.log(user.uid)\n\t\tif(loggedIn) {\n\t\t\tconst fireData = userData;\n\t\t\tlet existingUser = fireData.find(data => {\n\t\t\t\treturn data.user === user.email;\n\t\t\t})\n\t\t\tif(existingUser === undefined) {\n\t\t\t\t// Creates Templete for NewUsers\n\t\t\t\tconst month = [...Array(12)].map((e, i) => {\n\t\t\t\t\treturn ({\n\t\t\t\t\t\t\"month\": i + 1,\n\t\t\t\t\t\t\"Year\": 2023,\n\t\t\t\t\t\t\"date\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"DateNum\": -1,\n\t\t\t\t\t\t\t\t\"WeekdayNum\": -1,\n\t\t\t\t\t\t\t\t\"Week\": -1,\n\t\t\t\t\t\t\t\t\"TimeSleep\": \"\",\n\t\t\t\t\t\t\t\t\"TimeWakeUp\": \"\",\n\t\t\t\t\t\t\t\t\"Notes\": [\"\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t// firebasePush(ref(db, 'AllData/' + user.uid), newUser);\n\t\t\t\tset(ref(db, 'AllData/' + user.uid), {\n\t\t\t\t\tuser: user.email,\n\t\t\t\t\tmonth\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t// Main div that contains all the pages.\n\t\t<div className='page-container '>\n\t\t\t<div className='fill-content'>\n\t\t\t\t{/* Nav Bar */}\n\t\t\t\t\t<Navbar loggedIn={loggedIn}/>\n\t\t\t\t\t{/* Routes to each corresponding page */}\n\t\t\t\t<Routes>\n\t\t\t\t\t\t<Route path='/' element={<Home />} />\n\t\t\t\t<Route path='/calendar' element={<Calendar handleNewUser={handleNewUser} importData={userData} user={user} loggedIn={loggedIn}/> }/>\n\t\t\t\t\t\t<Route path='/about' element={<About />} />\n\t\t\t\t\t\t<Route path='/resources' element={<Resources />} />\n\t\t\t\t\t\t\t<Route path='/healthier' element={<Healthier />} />\n\t\t\t\t\t\t\t<Route path='/faster' element={<Faster />} />\n\t\t\t\t\t\t\t<Route path='/better' element={<Better />} />\n\t\t\t\t\t\t<Route path='/login' element={<Login loggedIn={loggedIn}/>} />\n\t\t\t\t<Route path='/logout' element={<LogOut />} />\n\t\t\t\t\t</Routes>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;","/Users/claud/SCHOOL/christmas/src/components/Navbar.js",["89"],[],"import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport logo from \"../img/logo.png\"\nimport { Link } from 'react-router-dom';\nimport { useState } from 'react';\nimport { LogOut } from './Logout';\nfunction Navbar(props) {\n    const [navOpen, setNavOpen] = useState(false)\n\n    return (\n        <nav className='navbar'>\n                <div className=\"navbar\">\n                    <NavLink className=\"navbar-brand brand font-weight-bold ms-3\" to=\"/\" aria-label=\"Logo and Home Button\">\n                        <img className=\"logo_pic\" src={logo} alt='logo'></img>\n                    </NavLink>\n                    <h1>sleep&see</h1>\n                    <div className='menu-toggle' onClick={() => setNavOpen(!navOpen)}>\n                        <div className={navOpen ? \"hamBox hamBoxOpen\" : \"hamBox\"}>\n                            <span className={navOpen? \"lineTop spin\" : \"lineTop\"}></span>\n                            <span className={navOpen? \"lineBottom spin\" : \"lineBottom\"}></span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"nav-overlay\" style={{\n                    top: navOpen ? \"0\" : \"-100%\",\n                    transitionDelay: navOpen ? \"0s\" : \"0s\"\n                }}>\n                    <ul className=\"nav-links\">\n                        <li className=\"nav-item\">\n                            <Link to=\"/calendar\" onClick={() => setNavOpen(!navOpen)}style={{\n                            top: navOpen ? \"0\" : \"120px\",\n                            transitionDelay: navOpen ? \"0.9s\" : \"0s\",\n                        }}>calendar</Link>\n                            <div className=\"nav-item-wrapper\"></div>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/about\" onClick={() => setNavOpen(!navOpen)}style={{\n                            top: navOpen ? \"0\" : \"120px\",\n                            transitionDelay: navOpen ? \"0.9s\" : \"0s\",\n                        }}>about</Link>\n                            <div className=\"nav-item-wrapper\"></div>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/resources\" onClick={() => setNavOpen(!navOpen)}style={{\n                            top: navOpen ? \"0\" : \"120px\",\n                            transitionDelay: navOpen ? \"1s\" : \"0s\",\n                        }}>resources</Link>\n                            <div className=\"nav-item-wrapper\"></div>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/login\" onClick={() => setNavOpen(!navOpen)}style={{\n                            top: navOpen ? \"0\" : \"120px\",\n                            transitionDelay: navOpen ? \"1.1s\" : \"0s\",\n                            display: props.loggedIn ? \"none\" : \"block\"\n                        }}>login</Link>\n                            <div className=\"nav-item-wrapper\"></div>\n                            <Link to=\"/logout\" onClick={() => setNavOpen(!navOpen)}style={{\n                            top: navOpen ? \"0\" : \"120px\",\n                            transitionDelay: navOpen ? \"1.1s\" : \"0s\",\n                            display: props.loggedIn ? \"block\" : \"none\"\n                        }}>logout</Link>\n                            <div className=\"nav-item-wrapper\"></div>\n                        </li>\n                        \n                    </ul>\n                </div>\n        </nav>\n    //     <nav className='navbar navbar-expand-lg justify-content-between'>\n    //         <NavLink className=\"navbar-brand brand font-weight-bold ms-3\" to=\"/\" aria-label=\"Logo and Home Button\">\n    //             <img className=\"logo_pic\" src={logo} alt='logo'></img>\n    //         </NavLink>\n    //         <div className=\"form-inline\" id=\"navbarSupportedContent\">\n    //             <ul className=\"navbar-nav me-auto ms-auto\">\n    //                 <li className='nav-item me-5'>\n    //                     <NavLink className='text-purple' to='/about'>about</NavLink>\n    //                 </li>\n    //                 <li className='nav-item me-5'>\n    //                     <NavLink className='text-purple' to='/resources'>resources</NavLink>\n    //                 </li>\n    //                 <li className='nav-item me-5'>\n    //                     <NavLink className='text-purple' to='/login'>login</NavLink>\n    //                 </li>\n    //             </ul>\n    //         </div>\n    //   </nav>\n    )\n}\n\nexport default Navbar;","/Users/claud/SCHOOL/christmas/src/components/Resources.js",[],[],"/Users/claud/SCHOOL/christmas/src/components/Healthier.js",[],[],"/Users/claud/SCHOOL/christmas/src/components/Better.js",[],[],"/Users/claud/SCHOOL/christmas/src/components/Faster.js",[],[],"/Users/claud/SCHOOL/christmas/src/components/Logout.js",[],[],"/Users/claud/SCHOOL/christmas/src/components/Home.js",[],[],"/Users/claud/SCHOOL/christmas/src/components/Login.js",["90"],[],"import React from 'react';\nimport { redirect } from 'react-router-dom';\nimport { Navigate } from \"react-router-dom\";\nimport StyledFireBaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport { getAuth, EmailAuthProvider, GoogleAuthProvider } from 'firebase/auth';\nimport Footer from \"./Footer\";\nimport loginImage from \"../img/login-image.png\"\n\nconst firebaseUIConfig = {\n    signInOptions: [\n        {provider: EmailAuthProvider.PROVIDER_ID, requiredDisplayName: true},\n        GoogleAuthProvider.PROVIDER_ID,\n    ],\n    signInFlow: 'popup',\n    credentialHelper: 'none',\n    callbacks: {\n        signInSuccessWithAuthResult: () => {\n            window.location.href = \"/\";\n        }\n    }\n}\nfunction Login(props) {\n    const auth = getAuth();\n    if(props.loggedIn) {\n        window.location.href = \"/\";\n    } else {\n        return (\n            <>\n                <main>\n                    <div className=\"container\">\n                        <div className=\"content header-content\">\n                            <section className=\"row header-content align-items-center\">\n                                <h1 className='login-header'>Welcome to Sleep & See</h1>\n                                <StyledFireBaseAuth uiConfig={firebaseUIConfig} firebaseAuth={auth}/>\n                            </section>\n                        </div>\n                        <div className=\"content login-image-sec\">\n                            <img className=\"login-image\" src={loginImage} alt='graph'></img>\n                        </div>\n                    </div>\n                </main>\n                <Footer/>\n            </>\n        );\n    }\n    return redirect(\"/\");\n    \n}\nexport default Login;","/Users/claud/SCHOOL/christmas/src/components/About.js",[],[],"/Users/claud/SCHOOL/christmas/src/components/Calendar.js",["91","92","93","94","95","96","97"],[],"'use strict';\n\nimport React, { useState, useEffect } from 'react';\nimport blankData from '../data/blank-user.json'\nimport Footer from \"./Footer\";\nimport { get, getDatabase, ref, update, set } from 'firebase/database';\nimport rocketImage from \"../img/rocket.png\"\n\nfunction Calendar(props) {\n    // Calendar Values\n    const [calendarMonth, setCalendarMonth] = useState(grabPresentDate().thisMonthNumber);\n    const days = daysInMonth(calendarMonth, grabPresentDate().thisYearNumber);\n    const monthDetails = datesDayMonth(days, calendarMonth);\n    // Setting Values for Weekly Summary\n    const [selectSummary, setSelectSummary] = useState('0');\n    const [weekRange, setWeekRange] = useState(0);\n    // Assign Values\n    const givenData = props.importData;\n    const user = props.user;\n\n    // Create a new dataset on firebase if it's a new User\n    if(props.loggedIn) {\n        const db = getDatabase();\n        const pathway = '/AllData/' + props.user.uid;\n        get(ref(db, pathway)).then((snapshot) => {\n            if(!snapshot.exists()) {\n                console.log('Registering New User')\n                props.handleNewUser()\n            }\n        }).catch((error) => {\n            console.log(error)\n        })\n    }\n\n    // Loads display data for calendar\n    // If user log in, then grabs data from firebase.\n    // If user isn't log in, then grab data from local json file.\n    let userMonth = {};\n    let monthInfo = {}\n    if(props.loggedIn) {\n        Object.keys(givenData).forEach(keys => {\n            if(givenData[keys].user === user.email) {\n                userMonth = givenData[keys]\n            }\n        })\n        if (Object.keys(userMonth).length === 0) {\n            return <></>;\n        }\n        userMonth.month.forEach(month => {\n            if(month.month === calendarMonth) {\n                monthInfo = month;\n            }\n        })\n    } else {\n        userMonth = blankData;\n        userMonth.month.forEach(month => {\n            if(month.month === calendarMonth) {\n                monthInfo = month;\n            }\n        })\n    }\n\n    // Callback function to reset values for Weekly Summary\n    const resetWeekRecap = () => {\n        setSelectSummary('0');\n        setWeekRange(0);\n    }\n\n    // Grabs the amount of weeks in the given month\n    let weekCount = monthDetails[Object.keys(monthDetails).length - 1].week;\n    // Create the display data of each week for given month.\n    const handleCalenderWeek = [...Array(weekCount)].map((e, i) => <WeekCard loggedIn={props.loggedIn} setWeekRange={resetWeekRecap} user={user} userData={monthInfo} monthData={monthDetails} weekNum={i + 1} key={i}/>)\n    const monthDisplayText = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    // Switch calendar to the preivous month, if it's not January.\n    const handlePreviousMonth = (event) => {\n        if(calendarMonth > 1) {\n            setCalendarMonth(calendarMonth - 1);\n            resetWeekRecap()\n        }\n    }\n\n    // Switch calendar to the next month, if it's not December.\n    const handleNextMonth = (event) => {\n        if(calendarMonth < 12) {\n            setCalendarMonth(calendarMonth + 1);\n            resetWeekRecap()\n        }\n    }\n\n    return (\n        <>\n            <div className=\"container text-center bg-white\">\n                <div className=\"row header-calendar\">\n                    <div>\n                        <h1 className='calendar-header'>Calendar</h1>\n                        {props.loggedIn && <h2 className='calendar-header'>Welcome, {user.displayName}</h2>}\n                    </div>\n                    <div className=\"col\">\n                        <button onClick={handlePreviousMonth} type=\"button\" className=\"btn btn-dark\">{'<'}</button>\n                    </div>\n                    <div className=\"col calendar-month\">{monthDisplayText[calendarMonth - 1]}</div>\n                    <div className=\"col\">\n                        <button onClick={handleNextMonth} type=\"button\" className=\"btn btn-dark\">{'>'}</button>\n                    </div>\n                </div>\n                <div className=\"row calendar-days\">\n                    <div className=\"col\">Sunday</div>\n                    <div className=\"col\">Monday</div>\n                    <div className=\"col\">Tuesday</div>\n                    <div className=\"col\">Wednesday</div>\n                    <div className=\"col\">Thursday</div>\n                    <div className=\"col\">Friday</div>\n                    <div className=\"col\">Saturday</div>\n                </div>\n                    {handleCalenderWeek}\n                    <div><h1 className='summary-header'>Weekly Summary</h1></div>\n                    <WeekRecap weekRange={weekRange} setWeekRange={setWeekRange} setSelectSummary={setSelectSummary} selectSummary={selectSummary} monthDetails={monthDetails} weekCount={weekCount} userData={monthInfo}/>\n            </div>\n            <Footer/>\n        </>\n    );\n}\n\n// function that creates Weekly Summary\nexport function WeekRecap(props) {\n    let weekmessage = [];\n    const goodAmount = [\"Sleeping like a baby never looked so good!\", \n                        \"Get your zzz's and wake up with ease!\", \n                        \"Sweet dreams are made of good sleep!\", \n                        \"Catch some quality Z's and feel like a million bucks!\",\n                        \"The best things in life are free, like a good night's sleep!\",\n                        \"Sleep is the ultimate beauty treatment, and you deserve to wake up looking fabulous!\",\n                        \"Want to be a superhero tomorrow? Start by getting a good night's sleep tonight!\",\n                        \"A good night's sleep is like hitting the reset button on your body and mind!\",\n                        \"Say goodbye to dark circles and hello to sweet dreams!\",\n                        \"Don't let insomnia be your arch-nemesis; conquer it with a good night's sleep!\"\n                    ]\n    const badAmount = [\"Without sleep, you're just a zombie in disguise!\",\n                       \"Sleep deprivation is like a bad hair day for your brain!\",\n                       \"No beauty sleep, no beauty glow!\",\n                       \"Sleep is free, but the cost of not getting enough is high!\",\n                       \"Sleep is not a luxury, it's a necessity!\",\n                       \"You can't run on empty, so get some sleep!\",\n                       \"Want to feel like a grumpy cat? Just skip your sleep!\",\n                       \"The night is too short to skip sleep!\",\n                       \"Sleeping is like hitting the save button for your brain, don't forget to save!\",\n                       \"If you're feeling like a walking dead, you might need some shut-eye!\"\n                    ]\n\n    if(props.weekRange >= 7){\n        weekmessage.push(goodAmount[Math.floor(Math.random() * 10)]);\n    }else if (props.weekRange > 0 && props.weekRange < 7 ) {\n        weekmessage.push(badAmount[Math.floor(Math.random() * 10)])\n    }\n    // Created an Array of data\n    const selectWeek = {}\n    for(let i=1; i<= props.weekCount; i++) {\n        const weekData = props.monthDetails.filter(data => {\n            return data.week === i;\n        })\n        selectWeek[i] = weekData;\n    }\n\n    const dayofWeekDisplay = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    \n    // Create a week selector\n    const displaySelectGroup = Object.keys(selectWeek).map(element => {\n        const weekDate = selectWeek[element];\n        const firstDayOfWeek = weekDate[0];\n        const lastDayOfWeek = weekDate[weekDate.length - 1];\n        return (\n            <option value={element} key={element}>\n                {dayofWeekDisplay[firstDayOfWeek.dayofWeek] + \", \" + firstDayOfWeek.date + \" - \" + dayofWeekDisplay[lastDayOfWeek.dayofWeek] + \", \" + lastDayOfWeek.date}\n            </option>\n        )\n    })\n\n    // Change the average amount of sleep based on Week Selected\n    const handleWeekChange = (event) => {\n        props.setSelectSummary(event.target.value)\n        let weekValue = parseInt(event.target.value)\n\n        const dateNotesData = []\n        Object.keys(props.userData.date).find(key => {\n            let data = props.userData.date[key];\n            if(weekValue === data.Week) {\n                dateNotesData.push(props.userData.date[key]);\n            }\n        })\n\n        let sleepDataSum = 0;\n        dateNotesData.forEach(element => {\n            sleepDataSum += grabDifferences(element.TimeSleep, element.TimeWakeUp);\n        })\n\n        props.setWeekRange(Math.round(sleepDataSum / dateNotesData.length * 10) / 10 || 0); //Set value based on averages or 0 if there's non\n    }\n\n    return (\n        <div className=\"row bg-body-secondary\">\n            <select className=\"form-select\" aria-label=\"Default select example\" onChange={handleWeekChange} value={props.selectSummary}>\n                <option value='0'>Select a Week</option>\n                {displaySelectGroup}\n            </select>\n            <p className=\"p-3 mb-2 text-dark average-num-sleep\">Average Number of Sleep: {props.weekRange}</p>\n            <p className='week-message'>{weekmessage}</p>\n        </div>\n    );\n}\n\n// Return the time in hour based on two times\nfunction grabDifferences(timeSleep, timeWakeUp) {\n    var value_start = timeSleep.split(':');\n    var value_end = timeWakeUp.split(':');\n\n    var time_end = new Date();\n    var time_start = new Date();\n\n    if (value_start[0] >= 12) {\n        time_start.setDate(time_start.getDate() - 1);\n        if (value_end[0] >= 12) {;\n            time_end.setDate(time_end.getDate() - 1);\n        }\n    }\n\n    time_start.setHours(value_start[0], value_start[1], 0)\n    time_end.setHours(value_end[0], value_end[1], 0)\n\n    return (time_end - time_start) / 1000 / (60 * 60);\n}\n\n// a function to references today's date\nfunction grabPresentDate() {\n    const newDate = new Date();\n    return {\n        thisDate: newDate,\n        thisYearNumber: newDate.getFullYear(),\n        thisMonthNumber: newDate.getMonth() + 1\n    }\n}\n\n// a function that returns the amount of days in a given month and year\nfunction daysInMonth(month, year) {\n    return new Date(year, month, 0).getDate();\n}\n\n// Creating objects of each date containing year, date number, and month\nfunction datesDayMonth(day, givenMonth) {\n    // Creates each date of today's month into an object\n    const dateData = [...Array(day)].map((e, i) => {\n        let dayOfWeekNumber = new Date(givenMonth +  ' ' + (i + 1) + ', ' + grabPresentDate().thisYearNumber).getDay();\n        const dayInfo = {\n            date: (i + 1),\n            dayofWeek: dayOfWeekNumber,\n            month: givenMonth\n        }\n        return dayInfo;\n    })\n    // Apply the week number of each date\n    let weekCount = 1;\n    const realTimeDates = dateData.map((givenDate) => {\n        givenDate['week'] = weekCount;\n        if(givenDate.dayofWeek === 6) {\n            weekCount+=1;\n        }\n        return givenDate\n    })\n    return realTimeDates;\n}\n\n// function that creates the rows for each week\nexport function WeekCard(props) {\n    const filterWeek = props.monthData.filter((data) => {\n        return data.week === props.weekNum;\n    })\n    checkWeekData(filterWeek);\n    const displayWeek = filterWeek.map((data) => <DayCard loggedIn={props.loggedIn} setWeekRange={props.setWeekRange} user={props.user} userData={props.userData} dayInfo={data} key={data.date + data.dayofWeek + data.month}/>)\n    return (\n        <div className=\"row\">\n                {displayWeek}\n        </div>\n    );\n}\n\n// Corrects the first and last week of each month\nfunction checkWeekData(data) { \n    if(data.length < 7) {\n        for (let i = 0; i < 7; i++) {\n            if (data[i] === undefined) {\n                const dayInfo = {\n                    date: '',\n                    dayofWeek: -1 * i,\n                    month: grabPresentDate().thisMonthNumber\n                }\n                data.push(dayInfo)\n            }\n        }\n        if(data[0].week === 1) {\n            data.sort(function(a, b) {return a.dayofWeek - b.dayofWeek});\n        }\n    }\n}\n\n// creates the information for each date\nexport function DayCard(props) {\n    const [addNote, setAddNote] = useState('');\n    // User Wake up and Sleep UseState\n    const [storedNotes, setStoredNotes] = useState([\"\"]); // Users Notes Array UseState\n    const [storedSleep, setStoredSleep] = useState('')\n    const [storedWakeUp, setStoredWakeUp] = useState('')\n    const dayInfo = props.dayInfo\n\n    useEffect(() => {\n        // Set stored values based on data found\n        if(props.userData !== undefined) {\n            let userDateData = {};\n            Object.keys(props.userData.date).find(key => {\n                let data = props.userData.date[key];\n                if(data.DateNum === dayInfo.date && data.WeekdayNum === dayInfo.dayofWeek) {\n                    userDateData = props.userData.date[key];\n                }\n            }) \n            if(userDateData !== undefined) {    \n                setStoredSleep(userDateData.TimeSleep);\n                setStoredWakeUp(userDateData.TimeWakeUp);\n                setStoredNotes(userDateData.Notes || [\"\"]);\n            }\n        }  \n    }, [])\n\n    const handleInputNote = (event) => {\n        setAddNote(event.target.value);\n    }\n\n    const handleSleepChange = (event) => {\n        setStoredSleep(event.target.value);\n    }\n\n    const handleWakeUpChange = (event) => {\n        setStoredWakeUp(event.target.value);\n    }\n\n    const checkDataExist = () => {\n        let dateNotesData = {};\n        Object.keys(props.userData.date).find(key => {\n            let data = props.userData.date[key];\n            if(data.DateNum === dayInfo.date && data.WeekdayNum === dayInfo.dayofWeek) {\n                dateNotesData = props.userData.date[key];\n            }\n        }) \n        console.log(Object.keys(dateNotesData).length === 0, dateNotesData);\n\n        let noteList = [...storedNotes];\n        if(addNote !== \"\") {\n            noteList = [...storedNotes, addNote]\n        }\n\n        const newDateInfo = {\n            DateNum: dayInfo.date,\n            WeekdayNum: dayInfo.dayofWeek,\n            Week: dayInfo.week,\n            TimeSleep: storedSleep,\n            TimeWakeUp: storedWakeUp,\n            Notes: noteList,\n        }\n        props.userData.date[dayInfo.date] = newDateInfo;\n        \n        // Push to Firebase\n        // If statment, if data exist, then update, else set new values\n        if(props.loggedIn) {\n            const db = getDatabase();\n            const pathway = '/AllData/' + props.user.uid + '/month/' + (dayInfo.month - 1) + '/date/' + dayInfo.date;\n            get(ref(db, pathway)).then((snapshot) => {\n                if(snapshot.exists()) {\n                    console.log(snapshot.val());\n                    update(ref(db, pathway), {\n                        TimeSleep: storedSleep,\n                        TimeWakeUp: storedWakeUp,\n                        Notes: noteList,\n                    })\n                } else {\n                    console.log('Adding new Data')\n                    set(ref(db, pathway), newDateInfo);\n                }\n            }).catch((error) => {\n                console.log(error)\n            })\n        }\n    }\n\n    const handleSubmitNote = () => {    \n        setStoredNotes([...storedNotes, addNote]);\n        checkDataExist();\n        setAddNote('');\n    }\n\n    const handleSubmitTime = () => {\n        props.setWeekRange(0);\n        checkDataExist();\n    }\n\n    // have blank card if date doesn't exist\n    if (dayInfo.date === '') {\n        return <div className='col'></div>\n    }\n    let highlightToday = 'btn';\n    if (dayInfo.date === grabPresentDate().thisDate.getDate() &&\n        dayInfo.month === grabPresentDate().thisMonthNumber) {\n        highlightToday = highlightToday + ' border border-primary';\n    }\n\n    // Filter to get each date\n    let dateNoteList = <></>;\n\n    let dateNotesData = {};\n    Object.keys(props.userData.date).find(key => {\n        let data = props.userData.date[key];\n        if(data.DateNum === dayInfo.date && data.WeekdayNum === dayInfo.dayofWeek) {\n            dateNotesData = props.userData.date[key];\n        }\n    })\n\n    // Return a list of notes if there's nots\n    if(dateNotesData.Notes !== undefined) {\n        dateNoteList = dateNotesData.Notes.map((note, i) => {\n            if(note !== '') {\n                return <DateNotes note={note} key={i}/>\n            }\n            return <></>;\n        })\n    }\n\n    if(Object.keys(dateNotesData).length !== 0) {\n        if(dateNotesData.TimeSleep !== \"\" && dateNotesData.TimeWakeUp !== \"\") {\n            highlightToday = highlightToday + \" bg-secondary text-white\"\n        }\n    }\n\n    const monthDisplayText = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const dayofWeekDisplay = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n    return (\n        <div className='col'>\n            <a className={highlightToday} data-bs-toggle=\"offcanvas\" href={'#date-' + dayInfo.date + '-' + dayInfo.month} role=\"button\" aria-controls=\"offcanvasExample\">\n                {dayInfo.date}\n            </a>\n\n            <div className=\"offcanvas offcanvas-end\" tabIndex=\"-1\" id={'date-' + dayInfo.date + '-' + dayInfo.month} aria-labelledby=\"offcanvasRightLabel\">\n            <div className=\"offcanvas-header\">\n                <h5 className=\"offcanvas-title\" id=\"offcanvasRightLabel\">{monthDisplayText[dayInfo.month - 1] + ' ' + dayInfo.date + ', ' + dayofWeekDisplay[dayInfo.dayofWeek]}</h5>\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"></button>\n            </div>\n                <div className=\"offcanvas-body\">\n                    <p className='text-dark'>Time Sleep the Day Before</p>\n                    <input placeholder='Time Slept Last Night' value={storedSleep} onChange={handleSleepChange} type=\"time\" className=\"form-control mb-3\" aria-label=\"Text input with dropdown button\" />\n                    <p className='text-dark'>Time Wake Up</p>\n                    <input placeholder='Time Woke Up' type=\"time\" value={storedWakeUp} onChange={handleWakeUpChange} className=\"form-control mb-3\" aria-label=\"Text input with dropdown button\" />\n                    <button className=\"btn btn-outline-secondary mb-3\" type=\"button\" onClick={handleSubmitTime}>Update Time</button>\n                    <ul className=\"list-group\">\n                        {dateNoteList}\n                        <li className=\"list-group-item\">\n                            <div className='input-group'>\n                                <input value={addNote} onChange={handleInputNote} type=\"text\" className=\"form-control\" placeholder=\"Add Notes\" aria-label=\"text box\" aria-describedby=\"basic-addon2\" />\n                                <div className=\"input-group-append\">\n                                    <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={handleSubmitNote}>+</button>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport function DateNotes(props) {\n    return (\n        <li className=\"list-group-item\">\n            {props.note}\n        </li>\n    );\n}\n\nexport default Calendar;","/Users/claud/SCHOOL/christmas/src/components/Footer.js",[],[],"/Users/claud/SCHOOL/christmas/src/components/CardContainer.js",[],[],"/Users/claud/SCHOOL/christmas/src/components/Card.js",[],[],{"ruleId":"98","severity":1,"message":"99","line":27,"column":7,"nodeType":"100","messageId":"101","endLine":27,"endColumn":9},{"ruleId":"98","severity":1,"message":"102","line":15,"column":50,"nodeType":"100","messageId":"101","endLine":15,"endColumn":62},{"ruleId":"98","severity":1,"message":"103","line":18,"column":9,"nodeType":"100","messageId":"101","endLine":18,"endColumn":21},{"ruleId":"98","severity":1,"message":"104","line":18,"column":23,"nodeType":"100","messageId":"101","endLine":18,"endColumn":38},{"ruleId":"98","severity":1,"message":"105","line":23,"column":8,"nodeType":"100","messageId":"101","endLine":23,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":69,"column":5,"nodeType":"108","endLine":69,"endColumn":7,"suggestions":"109"},{"ruleId":"98","severity":1,"message":"110","line":6,"column":10,"nodeType":"100","messageId":"101","endLine":6,"endColumn":16},{"ruleId":"98","severity":1,"message":"111","line":3,"column":10,"nodeType":"100","messageId":"101","endLine":3,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":1,"column":1,"nodeType":"114","messageId":"115","endLine":1,"endColumn":14,"fix":"116"},{"ruleId":"98","severity":1,"message":"117","line":7,"column":8,"nodeType":"100","messageId":"101","endLine":7,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":185,"column":51,"nodeType":"120","messageId":"121","endLine":185,"endColumn":53},{"ruleId":"118","severity":1,"message":"119","line":318,"column":55,"nodeType":"120","messageId":"121","endLine":318,"endColumn":57},{"ruleId":"106","severity":1,"message":"122","line":330,"column":8,"nodeType":"108","endLine":330,"endColumn":10,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"119","line":346,"column":51,"nodeType":"120","messageId":"121","endLine":346,"endColumn":53},{"ruleId":"118","severity":1,"message":"119","line":417,"column":47,"nodeType":"120","messageId":"121","endLine":417,"endColumn":49},"no-unused-vars","'db' is assigned a value but never used.","Identifier","unusedVar","'firebasePush' is defined but never used.","'errorMessage' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","'styles' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataRef'. Either include it or remove the dependency array.","ArrayExpression",["124"],"'LogOut' is defined but never used.","'Navigate' is defined but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"125","text":"126"},"'rocketImage' is defined but never used.","array-callback-return","Array.prototype.find() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'dayInfo.date', 'dayInfo.dayofWeek', and 'props.userData'. Either include them or remove the dependency array.",["127"],{"desc":"128","fix":"129"},[0,13],"",{"desc":"130","fix":"131"},"Update the dependencies array to be: [dataRef]",{"range":"132","text":"133"},"Update the dependencies array to be: [dayInfo.date, dayInfo.dayofWeek, props.userData]",{"range":"134","text":"135"},[2055,2057],"[dataRef]",[13261,13263],"[dayInfo.date, dayInfo.dayofWeek, props.userData]"]